(this["webpackJsonpwinggo.us"]=this["webpackJsonpwinggo.us"]||[]).push([[6],{104:function(e,a,t){e.exports=t.p+"static/media/serverSideRender.85424c15.gif"},105:function(e,a,t){e.exports=t.p+"static/media/clientSideRender.75c1c9a4.gif"},106:function(e,a,t){e.exports=t.p+"static/media/lazyLoading.1cdd3a35.png"},109:function(e,a,t){"use strict";t.r(a);var n=t(0),i=t.n(n),r=t(36),o=t.n(r),l=t(74),s=t.n(l),c=t(16),d=t.n(c),m=t(31),u=t(32),g=t(1),p=t(2),h=t(3),f=t.n(h),b=t(11),w=t.n(b),v=t(4),y=i.a.forwardRef((function(e,a){var t=e.bsPrefix,n=e.className,r=e.fluid,o=e.rounded,l=e.roundedCircle,s=e.thumbnail,c=Object(p.a)(e,["bsPrefix","className","fluid","rounded","roundedCircle","thumbnail"]);t=Object(v.a)(t,"img");var d=f()(r&&t+"-fluid",o&&"rounded",l&&"rounded-circle",s&&t+"-thumbnail");return i.a.createElement("img",Object(g.a)({ref:a},c,{className:f()(n,d)}))}));y.displayName="Image",y.defaultProps={fluid:!1,rounded:!1,roundedCircle:!1,thumbnail:!1};var E=y,k={bsPrefix:w.a.string,fluid:w.a.bool,rounded:w.a.bool,roundedCircle:w.a.bool,thumbnail:w.a.bool},x=i.a.forwardRef((function(e,a){var t=e.className,n=Object(p.a)(e,["className"]);return i.a.createElement(E,Object(g.a)({ref:a},n,{className:f()(t,"figure-img")}))}));x.displayName="FigureImage",x.propTypes=k,x.defaultProps={fluid:!0};var I=x,C=Object(u.a)("figure-caption",{Component:"figcaption"}),N=Object(u.a)("figure",{Component:"figure"});N.Image=I,N.Caption=C;var R=N,S=t(77),_=t.n(S),P=t(69),z=t(104),A=t.n(z),j=t(105),J=t.n(j),O=t(106),T=t.n(O);a.default=function(){return i.a.createElement(P.a,null,i.a.createElement("div",null,i.a.createElement("div",{className:s.a.page},i.a.createElement(d.a,null,i.a.createElement("div",{className:s.a.picContainer},i.a.createElement("img",{src:o.a,className:s.a.frontPic,alt:"My website's front page."}))),i.a.createElement(d.a,null,i.a.createElement("div",{className:s.a.content},i.a.createElement("h1",{style:{textAlign:"center"}},"Rearchitecting My Website's Frontend"),i.a.createElement("p",null,"In this post we'll take a look at the (1) why front-end apps are moving towards dynamic single page apps (PWA) and away from from what we've been doing so long using standard HTML/CSS/JS with server-side rendering. (2) I'll be sharing insights on my approach and outline the steps I took to move away from my legacy website codebase into a dynamic interface that takes advantage of modern browsers. And lastly, (3) there are some interesting technologies I can see myself adopting moving forward that are relevant in this area."),i.a.createElement("p",null,"It's 2019 and by now everyone knows that progessive web apps (PWA) are the standard moving forward. Everyone cares about the user experience, and just 2-3 seconds of wait time navigating from page to page can deter an interested user. PWAs focus on the user experience while providing reliability and engagement. And what better way to brush up on React with the introduction of v16.8 than to rearchitect my entire site?"),i.a.createElement("div",{style:{textAlign:"center",marginTop:"30px"}},i.a.createElement(R,null,i.a.createElement(R.Image,{style:{marginRight:"10px"},src:J.a,width:280,alt:"clientRender"}),i.a.createElement(R.Image,{style:{marginLeft:"10px"},src:A.a,width:280,alt:"clientRender"}),i.a.createElement(R.Caption,null,"Client-side render vs. Server-side render",i.a.createElement("br",null),"3.5s vs 6.9s"))),i.a.createElement("p",null,"Immediately the transitions between routes feels smoother and is at least 2x faster (>1s vs 2.2s load time) because instead of waiting for the server to respond with a new HTML page, the browser simply needs to run JavaScript to manipulate the DOM. Server communication is unnecessary."),i.a.createElement("p",null,"Additionally, I've optimized performance on inital load speed by taking advantage of lazy loading and code splitting introduced in React v16.6 used in conjunction with Webpack v4. Code-splitting works by loading the bare minimum JavaScript to make the webpage interactive, and downloading the rest of the JS code that's unnecessary at that moment while the browser is idle. By splitting my code into various bundles which can then be loaded on demand, the bundle the browser needs to download when hitting the landing page is reduced by a sizable fraction in size and therefore user wait time upon initalization is shrunk. Here is a glimpse of how it works in code."),i.a.createElement("br",null),i.a.createElement(_.a,{gist:"Winggo/8d834d72337cb8eccdf1442983bf50d7"}),i.a.createElement("br",null),i.a.createElement("p",null,"The following graphic provides a visual of lazy loading in action, as represented by individual chunks of JavaScript:"),i.a.createElement("div",{style:{textAlign:"center"}},i.a.createElement("img",{src:T.a,style:{width:"85%",marginBottom:"25px"},alt:"Network tab on Chrome DevTools."})),i.a.createElement("p",null,"I'll leave it here for now. There are some technologies I wish to look into, as optimization is always a work in development. I'm keen into researching more about the React-Loadable library to lazy load JavaScript bundles and compare it wth the method maintained by React.")))),i.a.createElement(d.a,null,i.a.createElement(m.a,{content:"There's always room for optimization."}))))}},74:function(e,a,t){e.exports={page:"blogs_page__3IXNm",picContainer:"blogs_picContainer__5v3o9",frontPic:"blogs_frontPic__3D8AV",content:"blogs_content__2GlGU"}}}]);
//# sourceMappingURL=6.4fe9b9fd.chunk.js.map